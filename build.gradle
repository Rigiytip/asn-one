import java.text.SimpleDateFormat

plugins {
  id "java"
  id "groovy"
  id "jacoco"
  id "jdepend"
  id "maven-publish"
  id 'pl.allegro.tech.build.axion-release' version '1.9.2'
  id "com.github.hierynomus.license" version "0.12.1"
  id "com.jfrog.bintray" version "1.7"
  id 'ru.vyarus.java-lib' version '1.0.5'
  id 'ru.vyarus.animalsniffer' version '1.4.2'
  id 'org.sonarqube' version "2.6"
}

repositories {
  mavenCentral()
}

group = "com.hierynomus.asn-one"
defaultTasks = ["build"]

ext {
  bintrayLabels = ["asn1", "ASN.1", "serialization", "parser"]
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations.compile.transitive = false

dependencies {
  signature 'org.codehaus.mojo.signature:java17:1.0@signature'

  compile "org.slf4j:slf4j-api:1.7.13"
  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
  testCompile 'commons-io:commons-io:2.5'
  testRuntime 'ch.qos.logback:logback-classic:1.1.3'
}

license {
  header = project.file("HEADER")
  mapping {
    java = 'SLASHSTAR_STYLE'
    groovy = 'SLASHSTAR_STYLE'
  }
  strictCheck true
}

scmVersion {
  tag {
    prefix = 'v'
    versionSeparator = ''
  }
  hooks {
    pre 'fileUpdate', [file: 'README.adoc', pattern: { v, c -> /:asn_version: .*/}, replacement: { v, c -> ":asn_version: $v" }]
    pre 'commit'
  }
}

project.version = scmVersion.version

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

tasks.withType(Test) {
  include "**/*Test.*"
  include "**/*Spec.*"
  afterSuite { descriptor, result ->
    def indicator = "\u001B[32m✓\u001b[0m"
    if (result.failedTestCount > 0) {
      indicator = "\u001B[31m✘\u001b[0m"
    }
    logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
  }
}

project.tasks.compileGroovy.onlyIf { false }

pom {
  description 'ASN.1 serialization and parsing library'
  url "https://gitlab.com/hierynomus/${project.name}"

  licenses {
    license {
      name "Apache License 2.0"
      url "https://opensource.org/licenses/Apache-2.0"
      distribution "repo"
    }
  }
  scm {
    url "https://gitlab.com/hierynomus/${project.name}"
    connection "scm:git@gitlab.com:hierynomus/${project.name}.git"
    developerConnection "scm:git@gitlab.com:hierynomus/${project.name}.git"
  }
  issueManagement {
    system 'GitLab'
    url "https://gitlab.com/hierynomus/${project.name}/issues"
  }
  developers {
    developer {
      id "hierynomus"
      name "Jeroen van Erp"
      email "jeroen@hierynomus.com"
      roles {
        role "Lead developer"
      }
    }
  }
}

if (project.hasProperty("bintrayUsername") && project.hasProperty("bintrayApiKey")) {
  bintray {
    user = project.property("bintrayUsername")
    key = project.property("bintrayApiKey")
    publish = true
    publications = ["maven"]
    pkg {
      repo = "maven"
      name = project.name
      licenses = ["Apache-2.0"]
      vcsUrl = "https://gitlab.com/hierynomus/${project.name}.git"
      websiteUrl = "https://gitlab.com/hierynomus/${project.name}"
      issueTrackerUrl = "https://gitlab.com/hierynomus/${project.name}/issues"
      labels = project.ext.bintrayLabels
      githubRepo = "hierynomus/${project.name}"
      version {
        name = project.version.toString()
        vcsTag = "v${project.version}"
        released = new SimpleDateFormat('yyyy-MM-dd\'T\'HH:mm:ss.SSSZZ').format(new Date())
        gpg {
          sign = true
          passphrase = project.property("signing.password")
        }
        mavenCentralSync {
          sync = true
          user = project.property("sonatypeUsername")
          password = project.property("sonatypePassword")
          close = 1
        }
      }
    }
  }
}

jdepend {
  toolVersion = "2.9.1"
  sourceSets = [sourceSets.main]
  ignoreFailures = true
}

jdependMain {
  reports {
    xml.enabled true
    text.enabled false
  }
}

task jdependReport(dependsOn: jdependMain, group: 'verification', description: 'Generates a HTML report after executing jdepend checks.')
jdependReport.doLast {
  ant.xslt(
    in: "$reporting.baseDir/jdepend/main.xml",
    style: "$rootDir/conf/jdepend/jdepend-report.xslt",
    out: "$reporting.baseDir/jdepend/main.html")
}

check {
  dependsOn += ['jdependReport']
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

sonarqube {
  properties {
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.organization", "hierynomus-github"
    property "sonar.projectKey", "com.hierynomus:asn-one"
    //property "sonar.login", project.property('sonar.login')
  }
}


project.tasks.release.finalizedBy(project.tasks.bintrayUpload)

task forkedUploadRelease(type: GradleBuild) {
  buildFile = project.buildFile
  tasks = ["bintrayUpload"]
}

project.tasks.release.dependsOn([project.tasks.build])
project.tasks.release.finalizedBy(project.tasks.forkedUploadRelease)

project.tasks.jacocoTestReport.dependsOn(project.tasks.test)
project.tasks.check.dependsOn(project.tasks.jacocoTestReport)

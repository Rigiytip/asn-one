import java.text.SimpleDateFormat

plugins {
  id "java"
  id "groovy"
  id "jacoco"
  id "maven-publish"
  id "signing"
  id 'pl.allegro.tech.build.axion-release' version '1.13.3'
  id "com.github.hierynomus.license" version "0.16.1"
  id 'ru.vyarus.github-info' version '1.2.0'
  id 'ru.vyarus.animalsniffer' version '1.5.3'
  id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

repositories {
  mavenCentral()
}

group = "com.hierynomus"
defaultTasks = ["build"]

ext {
  moduleName = "${project.group}.${project.name.replaceAll("-", "")}"
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations.compile.transitive = false

dependencies {
  signature 'org.codehaus.mojo.signature:java17:1.0@signature'

  compile "org.slf4j:slf4j-api:1.7.13"
  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
  testCompile 'commons-io:commons-io:2.5'
  testCompile 'javax.xml.bind:jaxb-api:2.3.0'
  testRuntime 'ch.qos.logback:logback-classic:1.1.3'
}

license {
  header = project.file("HEADER")
  mapping {
    java = 'SLASHSTAR_STYLE'
    groovy = 'SLASHSTAR_STYLE'
  }
  strictCheck true
}

scmVersion {
  tag {
    prefix = 'v'
    versionSeparator = ''
  }
  hooks {
    pre 'fileUpdate', [file: 'README.adoc', pattern: { v, c -> /:asn_version: .*/}, replacement: { v, c -> ":asn_version: $v" }]
    pre 'commit'
  }
}

project.version = scmVersion.version

jar {
    inputs.property("moduleName", moduleName)

    manifest {
       attributes  'Automatic-Module-Name': moduleName
   }
}

java {
	withJavadocJar()
	withSourcesJar()
}

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

tasks.withType(Test) {
  include "**/*Test.*"
  include "**/*Spec.*"
  afterSuite { descriptor, result ->
    def indicator = "\u001B[32m✓\u001b[0m"
    if (result.failedTestCount > 0) {
      indicator = "\u001B[31m✘\u001b[0m"
    }
    logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
  }
}

project.tasks.compileGroovy.onlyIf { false }

github {
  user 'hierynomus'
  license 'Apache'
}

publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
		}
	}
}

project.signing {
  required { project.gradle.taskGraph.hasTask("release") }
	sign publishing.publications.maven
}

if (project.hasProperty("signingKeyId") || project.hasProperty("signingKey")) {
	project.signing {
		def signingKeyId = project.findProperty("signingKeyId")
		def signingKey = project.findProperty("signingKey")
		def signingPassword = project.findProperty("signingPassword")
		if (signingKeyId) {
			useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
		} else if (signingKey) {
			useInMemoryPgpKeys(signingKey, signingPassword)
		}
		sign publishing.publications.maven
	}
}

project.plugins.withType(MavenPublishPlugin).all {
	PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
	publishing.publications.withType(MavenPublication).all { mavenPublication ->
		mavenPublication.pom {
			name = "${project.name}"
      description 'ASN.1 serialization and parsing library'
      url "https://github.com/hierynomus/${project.name}"
			licenses {
				license {
					name = "The Apache License, Version 2.0"
					url = "https://www.apache.org/licenses/LICENSE-2.0"
				}
			}
			developers {
				developer {
					id = "hierynomus"
					name = "Jeroen van Erp"
					email = "jeroen@hierynomus.com"
				}
			}
      scm {
        url "https://github.com/hierynomus/${project.name}"
        connection "scm:git@github.com:hierynomus/${project.name}.git"
        developerConnection "scm:git@github.com:hierynomus/${project.name}.git"
      }
		}
	}
}

nexusPublishing {
	repositories {
		sonatype()    //sonatypeUsername and sonatypePassword properties are used automatically
	}

	connectTimeout = Duration.ofMinutes(3)
	clientTimeout = Duration.ofMinutes(3)
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

task forkedUploadRelease(type: GradleBuild) {
  buildFile = project.buildFile
  tasks = ["clean","currentVersion","publishToSonatype"]
}

project.tasks.release.dependsOn([project.tasks.build])
project.tasks.release.finalizedBy(project.tasks.forkedUploadRelease)

project.tasks.jacocoTestReport.dependsOn(project.tasks.test)
project.tasks.check.dependsOn(project.tasks.jacocoTestReport)
